package seonjingame;

import javax.swing.*;

import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

public class mains22 extends JPanel implements ActionListener {
	
	int SIZE1 = 6; // 버튼 그리드의 크기
    int SIZE2 = 6;
    JPanel centerPanel;
    JButton[][] buttons; // 버튼 그리드
    JButton selectedButton; 
    int matchedCount;
    List<ImageIcon> iconList = new ArrayList<>();
    CardLayout cardLayout;
    mains1 win;
    int time2 = 30;
    JLabel timL;
    Timer timer;
    
    String img_url = "C:\\JavaSeonjin\\playGUI\\src\\img\\";
    String audio_url = "C:\\JavaSeonjin\\playGUI\\src\\adio\\";
    
    public mains22(mains1 win) {
    	this.win = win;
    	this.setLayout(new BorderLayout());
    	
    	timL = new JLabel();
        timL.setText(time2+"");
        add(timL,BorderLayout.NORTH);
        
    	 // 중앙에 GridLayout 배치
        JPanel centerPanel = new JPanel() {
        	Image background = new ImageIcon(img_url+"bear"+ win.getRandomNumber()+".png").getImage();
        		public void paint(Graphics g) {//그리는 함수
			        g.drawImage(background, 0, 0, null);//background를 그려줌   
			        super.paint(g);
			        }
	  };
	  centerPanel.setOpaque(false);
	  centerPanel.setLayout(new GridLayout(SIZE1, SIZE2));
	  add(centerPanel, BorderLayout.CENTER);

	  initbutton(centerPanel);
	  
  
    }
    public void timmer() {
    	timer = new Timer();
    	TimerTask task = new TimerTask() {
    	
			@Override
			public void run() {
				// TODO Auto-generated method stub
				time2--;
				timL.setText(time2+"");
				if (time2 <= 0)
					stopTimer();
			}
    		
    	};
    	timer.schedule(task, 1000,1000);
    }
    public void stopTimer() {
    	if (timer != null){
    		timer.cancel();
    	}
    }

    private void initbutton(JPanel jp) {
		// TODO Auto-generated method stub
    	 buttons = new JButton[SIZE1][SIZE2];
         
         String[] imgPath = new String[18];
         for (int i = 1; i <= 18; i++) {
         	imgPath[i - 1] = img_url+"image" + i + ".png";
         }
         //img
         
         for (int i = 0; i < (SIZE1*SIZE2)/2; i++) {
         	ImageIcon icon = new ImageIcon(imgPath[i]);
             iconList.add(icon);
             iconList.add(icon);
         }
         
        Collections.shuffle(iconList);
      // 버튼을 프레임에 추가
        int k =0;
         for (int i = 0; i < SIZE1; i++) {
             for (int j = 0; j < SIZE2; j++) {
                 buttons[i][j] = new JButton(iconList.get(k));
                // buttons[i][j].setContentAreaFilled(false);//내용채우기 x 
                 buttons[i][j].setFocusPainted(false);
                 buttons[i][j].addActionListener(this);
                 buttons[i][j].setPreferredSize(new Dimension(100, 100));
                 jp.add(buttons[i][j]);
                 k++;
             }
         }
         
	}

	// 버튼 클릭 이벤트 처리
    public void actionPerformed(ActionEvent e) {
    	JButton clickedButton = (JButton) e.getSource();

        if (selectedButton == null) {
            selectedButton = clickedButton;
            selectedButton.setEnabled(false); // 선택한 버튼 비활성화
        } else {
            // 두 번째 버튼을 선택한 경우
            selectedButton.setEnabled(true); // 첫 번째 버튼 다시 활성화

            if (selectedButton == clickedButton) {
                // 같은 버튼을 다시 클릭한 경우, 선택 취소
                selectedButton = null;
            } else {
                // 다른 버튼을 선택한 경우
                clickedButton.setEnabled(false); // 선택한 버튼 비활성화

                int selectedRow = -1;
                int selectedColumn = -1;
                int clickedRow = -1;
                int clickedColumn = -1;

                // 선택한 버튼과 클릭한 버튼의 위치 찾기
                for (int i = 0; i < SIZE1; i++) {
                    for (int j = 0; j < SIZE2; j++) {
                        if (buttons[i][j] == selectedButton) {
                            selectedRow = i;
                            selectedColumn = j;
                        } else if (buttons[i][j] == clickedButton) {
                            clickedRow = i;
                            clickedColumn = j;
                        }
                    }
                }

                if (selectedButton.getIcon()==clickedButton.getIcon()) {
                    // 짝이 맞는 경우
                    matchedCount += 2;
                    
                    selectedButton.setVisible(false); // 첫 번째 버튼 숨김 처리
                    clickedButton.setVisible(false); // 두 번째 버튼 숨김 처리
                    selectedButton = null;
                    MP3Play("Trring");
                    
                    if (matchedCount == SIZE1 * SIZE2) {
                        // 모든 짝을 맞췄을 때
                        JOptionPane.showMessageDialog(this, "축하합니다! 모든 짝을 맞추셨습니다.");
                        stopTimer();
                    }
                    
                } else {
                    // 짝이 맞지 않는 경우
            		MP3Play("fail");
                    selectedButton.setEnabled(true); // 첫 번째 버튼 활성화
                    clickedButton.setEnabled(true); // 두 번째 버튼 활성화
                    selectedButton = null; // 선택 취소
                 }
            }
        }

    }
    public void MP3Play(String name) {
		 try {
            FileInputStream fis = new FileInputStream(new File(audio_url+name+".mp3"));
            Player player = new Player(fis);
            new Thread() {
                public void run() {
                    try {
                        player.play();
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                }
            }.start();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (JavaLayerException ex) {
            ex.printStackTrace();
        }
	}
    
}